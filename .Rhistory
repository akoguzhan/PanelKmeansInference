result <- estimate_transfer_clusters(sim$H)
# View results
print("Estimated Clusters:")
print(result$cluster_assignments)
print("Estimated Jump Points per Cluster:")
print(result$jump_points)
print("Estimated Means (Low/High Freq):")
print(result$cluster_means)
true_labels <- sim$true_clusters
pred_labels <- result$cluster_assignments
# Option 1: match directly
err1 <- mean(pred_labels != true_labels)
# Option 2: flip predicted labels (1 ↔ 2)
pred_flipped <- ifelse(pred_labels == 1, 2, 1)
err2 <- mean(pred_flipped != true_labels)
# Take minimum
misclassification_rate <- min(err1, err2)
print(paste("Misclassification Rate:", misclassification_rate))
# Simulate spectral transfer function data
simulate_simple_transfer <- function(N = 20, F = 100, seed = 42) {
set.seed(seed)
omega <- seq(0, pi, length.out = F)
true_clusters <- sample(1:2, N, replace = TRUE)
jump_points <- c(30, 70)  # jump index for group 1 and group 2
means <- list(
list(low = 0.5, high = 1.2),
list(low = 1.0, high = 0.3)
)
H <- matrix(0, nrow = N, ncol = F)
for (i in 1:N) {
group <- true_clusters[i]
jump <- jump_points[group]
H[i, 1:jump] <- rnorm(jump, mean = means[[group]]$low, sd = 0.1)
H[i, (jump+1):F] <- rnorm(F - jump, mean = means[[group]]$high, sd = 0.1)
}
list(H = H, omega = omega, true_clusters = true_clusters)
}
# Estimation function: EM-style clustering + jump detection
estimate_transfer_clusters <- function(H, max_iter = 20, K = 2) {
N <- nrow(H)
F <- ncol(H)
cluster_assignments <- sample(1:K, N, replace = TRUE)
jump_points <- rep(round(F / 2), K)
cluster_means <- matrix(0, nrow = K, ncol = 2)  # [low, high] means per group
for (iter in 1:max_iter) {
# M-step: Estimate jump point and means for each group
for (k in 1:K) {
group_indices <- which(cluster_assignments == k)
best_jump <- 2
best_loss <- Inf
for (j in 2:(F - 2)) {
mu1 <- mean(H[group_indices, 1:j])
mu2 <- mean(H[group_indices, (j+1):F])
loss <- sum((H[group_indices, 1:j] - mu1)^2) + sum((H[group_indices, (j+1):F] - mu2)^2)
if (loss < best_loss) {
best_loss <- loss
best_jump <- j
cluster_means[k, ] <- c(mu1, mu2)
}
}
jump_points[k] <- best_jump
}
# E-step: Reassign clusters based on current jump points and means
new_assignments <- rep(0, N)
for (i in 1:N) {
losses <- numeric(K)
for (k in 1:K) {
j <- jump_points[k]
mu1 <- cluster_means[k, 1]
mu2 <- cluster_means[k, 2]
losses[k] <- sum((H[i, 1:j] - mu1)^2) + sum((H[i, (j+1):F] - mu2)^2)
}
new_assignments[i] <- which.min(losses)
}
if (all(new_assignments == cluster_assignments)) break
cluster_assignments <- new_assignments
}
list(cluster_assignments = cluster_assignments, jump_points = jump_points, cluster_means = cluster_means)
}
# Example usage
sim <- simulate_simple_transfer()
result <- estimate_transfer_clusters(sim$H)
# View results
print("Estimated Clusters:")
print(result$cluster_assignments)
print("Estimated Jump Points per Cluster:")
print(result$jump_points)
print("Estimated Means (Low/High Freq):")
print(result$cluster_means)
true_labels <- sim$true_clusters
pred_labels <- result$cluster_assignments
# Option 1: match directly
err1 <- mean(pred_labels != true_labels)
# Option 2: flip predicted labels (1 ↔ 2)
pred_flipped <- ifelse(pred_labels == 1, 2, 1)
err2 <- mean(pred_flipped != true_labels)
# Take minimum
misclassification_rate <- min(err1, err2)
print(paste("Misclassification Rate:", misclassification_rate))
# Simulate spectral transfer function data
simulate_simple_transfer <- function(N = 20, F = 100, seed = 42) {
set.seed(seed)
omega <- seq(0, pi, length.out = F)
true_clusters <- sample(1:2, N, replace = TRUE)
jump_points <- c(30, 70)  # jump index for group 1 and group 2
means <- list(
list(low = 0.5, high = 1.2),
list(low = 1.0, high = 0.3)
)
H <- matrix(0, nrow = N, ncol = F)
for (i in 1:N) {
group <- true_clusters[i]
jump <- jump_points[group]
H[i, 1:jump] <- rnorm(jump, mean = means[[group]]$low, sd = 0.1)
H[i, (jump+1):F] <- rnorm(F - jump, mean = means[[group]]$high, sd = 0.1)
}
list(H = H, omega = omega, true_clusters = true_clusters)
}
# Estimation function: EM-style clustering + jump detection
estimate_transfer_clusters <- function(H, max_iter = 20, K = 2) {
N <- nrow(H)
F <- ncol(H)
cluster_assignments <- sample(1:K, N, replace = TRUE)
jump_points <- rep(round(F / 2), K)
cluster_means <- matrix(0, nrow = K, ncol = 2)  # [low, high] means per group
for (iter in 1:max_iter) {
# M-step: Estimate jump point and means for each group
for (k in 1:K) {
group_indices <- which(cluster_assignments == k)
best_jump <- 2
best_loss <- Inf
for (j in 2:(F - 2)) {
mu1 <- mean(H[group_indices, 1:j])
mu2 <- mean(H[group_indices, (j+1):F])
loss <- sum((H[group_indices, 1:j] - mu1)^2) + sum((H[group_indices, (j+1):F] - mu2)^2)
if (loss < best_loss) {
best_loss <- loss
best_jump <- j
cluster_means[k, ] <- c(mu1, mu2)
}
}
jump_points[k] <- best_jump
}
# E-step: Reassign clusters based on current jump points and means
new_assignments <- rep(0, N)
for (i in 1:N) {
losses <- numeric(K)
for (k in 1:K) {
j <- jump_points[k]
mu1 <- cluster_means[k, 1]
mu2 <- cluster_means[k, 2]
losses[k] <- sum((H[i, 1:j] - mu1)^2) + sum((H[i, (j+1):F] - mu2)^2)
}
new_assignments[i] <- which.min(losses)
}
if (all(new_assignments == cluster_assignments)) break
cluster_assignments <- new_assignments
}
list(cluster_assignments = cluster_assignments, jump_points = jump_points, cluster_means = cluster_means)
}
# Example usage
sim <- simulate_simple_transfer()
result <- estimate_transfer_clusters(sim$H)
# View results
print("Estimated Clusters:")
print(result$cluster_assignments)
print("Estimated Jump Points per Cluster:")
print(result$jump_points)
print("Estimated Means (Low/High Freq):")
print(result$cluster_means)
true_labels <- sim$true_clusters
pred_labels <- result$cluster_assignments
# Option 1: match directly
err1 <- mean(pred_labels != true_labels)
# Option 2: flip predicted labels (1 ↔ 2)
pred_flipped <- ifelse(pred_labels == 1, 2, 1)
err2 <- mean(pred_flipped != true_labels)
# Take minimum
misclassification_rate <- min(err1, err2)
print(paste("Misclassification Rate:", misclassification_rate))
pred_labels
true_labels
# Required packages
library(stats)
library(changepoint)
# === Step 1: Simulation Function ===
simulate_panel_with_transfer <- function(N = 100, T = 256, clusters = 2) {
true_clusters <- sample(1:clusters, N, replace = TRUE)
# Generate AR(1) x_it
x <- matrix(0, nrow = N, ncol = T)
for (i in 1:N) {
x[i, 1] <- rnorm(1)
for (t in 2:T) {
x[i, t] <- 0.8 * x[i, t - 1] + rnorm(1)
}
}
# Transfer kernels
kernel_list <- list(
c(rep(0.8, 10), rep(0.2, 10)),  # Group 1
c(rep(0.2, 10), rep(0.8, 10))   # Group 2
)
# Convolve to get y_it
y <- matrix(0, nrow = N, ncol = T)
for (i in 1:N) {
kernel <- kernel_list[[true_clusters[i]]]
for (t in 21:T) {
y[i, t] <- sum(kernel * x[i, (t - 19):t]) + rnorm(1, sd = 0.5)
}
}
list(y = y, x = x, true_clusters = true_clusters)
}
# === Step 2: Transfer Function Estimation in Frequency Domain ===
estimate_transfer_functions <- function(y, x) {
N <- nrow(y)
T <- ncol(y)
H <- matrix(0, nrow = N, ncol = T)
for (i in 1:N) {
fy <- fft(y[i, ])
fx <- fft(x[i, ])
H[i, ] <- Mod(fy / fx)
}
H
}
# === Step 3: Cluster Estimation with One Jump ===
estimate_clusters_from_spectra <- function(H, K = 2) {
N <- nrow(H)
F <- ncol(H)
cluster_assignments <- sample(1:K, N, replace = TRUE)
jump_points <- rep(round(F / 2), K)
cluster_means <- matrix(0, nrow = K, ncol = 2)
for (iter in 1:10) {
for (k in 1:K) {
group <- which(cluster_assignments == k)
best_jump <- 2
best_loss <- Inf
for (j in 2:(F - 2)) {
mu1 <- mean(H[group, 1:j])
mu2 <- mean(H[group, (j+1):F])
loss <- sum((H[group, 1:j] - mu1)^2) + sum((H[group, (j+1):F] - mu2)^2)
if (loss < best_loss) {
best_jump <- j
best_loss <- loss
cluster_means[k, ] <- c(mu1, mu2)
}
}
jump_points[k] <- best_jump
}
# E step
new_assignments <- rep(0, N)
for (i in 1:N) {
losses <- numeric(K)
for (k in 1:K) {
j <- jump_points[k]
mu1 <- cluster_means[k, 1]
mu2 <- cluster_means[k, 2]
losses[k] <- sum((H[i, 1:j] - mu1)^2) + sum((H[i, (j+1):F] - mu2)^2)
}
new_assignments[i] <- which.min(losses)
}
if (all(new_assignments == cluster_assignments)) break
cluster_assignments <- new_assignments
}
list(cluster_assignments = cluster_assignments, jump_points = jump_points, cluster_means = cluster_means)
}
# === Step 4: Misclassification Rate ===
misclass_rate <- function(true_labels, pred_labels) {
err1 <- mean(pred_labels != true_labels)
err2 <- mean(ifelse(pred_labels == 1, 2, 1) != true_labels)
min(err1, err2)
}
# === Step 5: Monte Carlo ===
run_monte_carlo <- function(R = 500, N = 100, T = 256) {
rmse_total <- 0
bias_total <- 0
miss_total <- 0
for (r in 1:R) {
sim <- simulate_panel_with_transfer(N, T)
H <- estimate_transfer_functions(sim$y, sim$x)
est <- estimate_clusters_from_spectra(H)
# Transfer means comparison (bias and rmse)
true <- c(0.8, 0.2, 0.2, 0.8)
est_means <- as.vector(t(est$cluster_means))
flip_means <- as.vector(t(est$cluster_means[2:1, ]))
bias1 <- mean(est_means - true)
bias2 <- mean(flip_means - true)
rmse1 <- sqrt(mean((est_means - true)^2))
rmse2 <- sqrt(mean((flip_means - true)^2))
bias_total <- bias_total + min(abs(bias1), abs(bias2))
rmse_total <- rmse_total + min(rmse1, rmse2)
# Classification
miss_total <- miss_total + misclass_rate(sim$true_clusters, est$cluster_assignments)
if (r %% 50 == 0) cat("Done", r, "replications\n")
}
list(
mean_bias = bias_total / R,
rmse = rmse_total / R,
misclassification_rate = miss_total / R
)
}
# === Run it ===
results <- run_monte_carlo()
print(results)
set.seed(123)
# Parameters
T <- 256
K <- 10
lags_causal <- 0:K
lags_twosided <- -K:K
# Generate explanatory variable
x <- rnorm(T)
# Causal filter (decaying exponential)
h_causal <- exp(-0.3 * lags_causal)
# Two-sided filter (symmetric)
h_twosided <- c(rev(h_causal[-1]), h_causal)
# Generate response variables
y_causal <- filter(x, h_causal, sides = 1, method = "convolution")
y_causal <- y_causal + rnorm(T, sd = 0.5)
y_twosided <- filter(x, h_twosided, sides = 2, method = "convolution")
y_twosided <- y_twosided + rnorm(T, sd = 0.5)
# Compute FFTs
X_fft <- fft(x)
Y_causal_fft <- fft(y_causal)
Y_twosided_fft <- fft(y_twosided)
freqs <- 0:(T-1) / T
# Design matrices
E_causal <- outer(freqs, lags_causal, function(w, k) exp(-1i * 2 * pi * w * k))
X_design_causal <- X_fft %*% E_causal
E_twosided <- outer(freqs, lags_twosided, function(w, k) exp(-1i * 2 * pi * w * k))
X_design_twosided <- X_fft %*% E_twosided
# Estimate filters via least squares
h_hat_causal <- Re(solve(t(Conj(X_design_causal)) %*% X_design_causal,
t(Conj(X_design_causal)) %*% Y_causal_fft))
h_hat_twosided <- Re(solve(t(Conj(X_design_twosided)) %*% X_design_twosided,
t(Conj(X_design_twosided)) %*% Y_twosided_fft))
# Plot results
par(mfrow = c(1, 2))
plot(lags_causal, h_causal, type = "l", lwd = 2, col = "blue", ylim = range(c(h_causal, h_hat_causal)),
main = "Causal Filter", ylab = "h", xlab = "Lag")
set.seed(123)
# Parameters
T <- 256
K <- 10
lags_causal <- 0:K
lags_twosided <- -K:K
# Generate explanatory variable
x <- rnorm(T)
# Causal filter (decaying exponential)
h_causal <- exp(-0.3 * lags_causal)
# Two-sided filter (symmetric)
h_twosided <- c(rev(h_causal[-1]), h_causal)
# Generate response variables
y_causal <- filter(x, h_causal, sides = 1, method = "convolution")
y_causal <- y_causal + rnorm(T, sd = 0.5)
y_twosided <- filter(x, h_twosided, sides = 2, method = "convolution")
y_twosided <- y_twosided + rnorm(T, sd = 0.5)
# Compute FFTs
X_fft <- fft(x)
Y_causal_fft <- fft(y_causal)
Y_twosided_fft <- fft(y_twosided)
freqs <- 0:(T-1) / T
# Design matrices
E_causal <- outer(freqs, lags_causal, function(w, k) exp(-1i * 2 * pi * w * k))
X_design_causal <- X_fft %*% E_causal
E_twosided <- outer(freqs, lags_twosided, function(w, k) exp(-1i * 2 * pi * w * k))
X_design_twosided <- X_fft %*% E_twosided
# Safe least squares function
safe_lstsq <- function(X, Y) {
XtX <- Conj(t(X)) %*% X
XtY <- Conj(t(X)) %*% Y
if (qr(XtX)$rank < ncol(XtX)) {
warning("Matrix is not full rank — using regularization")
return(Re(solve(XtX + 1e-6 * diag(ncol(XtX)), XtY)))
} else {
return(Re(solve(XtX, XtY)))
}
}
# Estimate filters
h_hat_causal <- safe_lstsq(X_design_causal, Y_causal_fft)
h_hat_twosided <- safe_lstsq(X_design_twosided, Y_twosided_fft)
# Ensure no NA or Inf
h_hat_causal[!is.finite(h_hat_causal)] <- 0
h_hat_twosided[!is.finite(h_hat_twosided)] <- 0
# Plot results
par(mfrow = c(1, 2))
plot(lags_causal, h_causal, type = "l", lwd = 2, col = "blue",
main = "Causal Filter", ylab = "h", xlab = "Lag",
ylim = range(c(h_causal, h_hat_causal), na.rm = TRUE))
lines(lags_causal, h_hat_causal, col = "red", lty = 2)
set.seed(123)
# Parameters
T <- 256
K <- 10
lags_causal <- 0:K
lags_twosided <- -K:K
# Generate explanatory variable
x <- rnorm(T)
# Causal filter (decaying exponential)
h_causal <- exp(-0.3 * lags_causal)
# Two-sided filter (symmetric)
h_twosided <- c(rev(h_causal[-1]), h_causal)  # Length: 2K + 1
# Generate responses
y_causal <- filter(x, h_causal, sides = 1)
y_causal[is.na(y_causal)] <- 0
y_causal <- y_causal + rnorm(T, sd = 0.5)
y_twosided <- filter(x, h_twosided, sides = 2)
y_twosided[is.na(y_twosided)] <- 0
y_twosided <- y_twosided + rnorm(T, sd = 0.5)
# FFTs
X_fft <- fft(x)
Y_causal_fft <- fft(y_causal)
Y_twosided_fft <- fft(y_twosided)
freqs <- 0:(T - 1) / T
# Design matrices for regression
E_causal <- outer(freqs, lags_causal, function(w, k) exp(-1i * 2 * pi * w * k))
X_design_causal <- E_causal * X_fft  # T x (K+1)
E_twosided <- outer(freqs, lags_twosided, function(w, k) exp(-1i * 2 * pi * w * k))
X_design_twosided <- E_twosided * X_fft  # T x (2K+1)
# Least squares estimation
h_hat_causal <- solve(Conj(t(X_design_causal)) %*% X_design_causal,
Conj(t(X_design_causal)) %*% Y_causal_fft)
h_hat_twosided <- solve(Conj(t(X_design_twosided)) %*% X_design_twosided,
Conj(t(X_design_twosided)) %*% Y_twosided_fft)
# Convert complex to real (only real parts of filters are relevant)
h_hat_causal_real <- Re(h_hat_causal)
h_hat_twosided_real <- Re(h_hat_twosided)
# Plotting
par(mfrow = c(1, 2))
plot(lags_causal, h_causal, type = "l", lwd = 2, col = "blue",
main = "Causal Filter", ylab = "h", xlab = "Lag",
ylim = range(c(h_causal, h_hat_causal_real)))
lines(lags_causal, h_hat_causal_real, col = "red", lty = 2)
legend("topright", legend = c("True", "Estimated"), col = c("blue", "red"), lty = 1:2)
plot(lags_twosided, h_twosided, type = "l", lwd = 2, col = "blue",
main = "Two-sided Filter", ylab = "h", xlab = "Lag",
ylim = range(c(h_twosided, h_hat_twosided_real)))
lines(lags_twosided, h_hat_twosided_real, col = "red", lty = 2)
legend("topright", legend = c("True", "Estimated"), col = c("blue", "red"), lty = 1:2)
0.166 * 7.99/9.32
(3263 * (5.73 - 5.9)^2 + 1095 * (6.39 - 5.9)^2)/40607.24
grid_harmonic_mean <- function(pvals) {
K <- length(pvals)
epsilons <- 1 / (1:K)
for (eps in epsilons) {
h_eps <- mean(1 / pmax(pvals, eps))
if (h_eps >= 1) return(eps)
}
return(1.0)  # fallback in degenerate cases
}
pvals <- c(0.01, 0.20, 0.50, 0.80)
grid_harmonic_mean(pvals)
grid_harmonic_mean <- function(pvals) {
K <- length(pvals)
epsilons <- 1 / (1:K)
for (eps in epsilons) {
h_eps <- mean(1 / pmax(pvals, eps))
}
if (h_eps >= 1) {
return(eps)
} else {
return(1.0)  # fallback in degenerate cases
}
}
pvals <- c(0.01, 0.20, 0.50, 0.80)
grid_harmonic_mean(pvals)
grid_harmonic_mean <- function(pvals) {
K <- length(pvals)
epsilons <- 1 / (1:K)
for (eps in epsilons) {
h_eps <- mean(1 / pmax(pvals, eps))
if (h_eps >= 1) return(eps)
}
}
pvals <- c(0.01, 0.20, 0.50, 0.80)
grid_harmonic_mean(pvals)
grid_harmonic_mean <- function(pvals) {
K <- length(pvals)
epsilons <- 1 / (1:K)
for (eps in epsilons) {
h_eps <- mean(1 / pmax(pvals, eps))
if (h_eps >= 1) return(eps)
}
return(1.0)  # fallback in degenerate cases
}
pvals <- c(0.01, 0.20, 0.50, 0.80)
grid_harmonic_mean(pvals)
grid_harmonic_mean <- function(pvals) {
K <- length(pvals)
epsilons <- 1 / (1:K)
for (eps in epsilons) {
h_eps <- mean(1 / pmax(pvals, eps))
if (h_eps >= 1) return(eps)
}
return(1.0)  # fallback in degenerate cases
}
pvals <- c(0.012, 0.037, 0.144, 0.388, 0.592)
grid_harmonic_mean(pvals)
grid_harmonic_mean <- function(pvals) {
K <- length(pvals)
epsilons <- 1 / (1:K)
for (eps in epsilons) {
h_eps <- mean(1 / pmax(pvals, eps))
if (h_eps >= 1) return(eps)
}
return(1.0)
}
pvals <- c(0.012, 0.037, 0.144, 0.388, 0.592)
grid_harmonic_mean(pvals)
cd("C:/Users/og7051ak/Nextcloud/Codes for Papers/Tests with Unknown Clusters/Tools/PanelKmeansInference")
cd("C:/Users/og7051ak/Nextcloud/Codes for Papers/Tests with Unknown Clusters/Tools/PanelKmeansInference")
wd("C:/Users/og7051ak/Nextcloud/Codes for Papers/Tests with Unknown Clusters/Tools/PanelKmeansInference")
setwd("C:/Users/og7051ak/Nextcloud/Codes for Papers/Tests with Unknown Clusters/Tools/PanelKmeansInference")
devtools::install()
